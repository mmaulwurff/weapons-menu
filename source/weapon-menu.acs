#library "LIBWEAPONMENU"
#include "zcommon.acs"

#include "constants.acs"

#include "data.acs"
#include "data_special.acs"
#include "favorite.acs"
#include "game_detection.acs"
#include "inventory_control.acs"
#include "string.acs"
#include "utils.acs"
#include "zscript-access.acs"

int globalState = 0;

// Global variables. Must be used only in enabled states.

// cached variables. Their values don't change during the game.
int  currentSet;
int  weaponCount;

int  highlightedWeapon;
int  selectedWeapon;

bool selectedWatchEnabled = true;

bool isInInventory[MAX_WEAPONS_NUMBER];

// Inventory variables section /////////////////////////////////////////////////

int nInventoryItems;

str inventoryClasses[N_INVENTORY_ITEMS];
str inventoryNames  [N_INVENTORY_ITEMS];

// Get status section //////////////////////////////////////////////////////////

function bool IsUninitialized(void) { return globalState == STATE_UNINITIALIZED; }
function bool IsOpened(void)     { return globalState == STATE_OPENED; }
function bool IsInventory(void)  { return globalState == STATE_INVENTORY; }
function bool IsVisible(void)    { return globalState == STATE_OPENED || globalState == STATE_CLOSED_VISIBLE; }

function bool IsAlwaysShow(int playerN)
{
  bool alwaysShow = GetUserCVar(playerN, "M8fWeaponMenuAlwaysShow");
  return alwaysShow;
}

// Global state must be changed only with this function.
function void WM_ChangeState(int newState, int playerN)
{
  if (newState == globalState)
  {
    return;
  }

  WM_LeaveState(globalState, playerN);

  globalState = newState;

  WM_EnterState(newState, playerN);
}

function void WM_LeaveState(int oldState, int playerN)
{
  // leave previous state
  switch (oldState)
  {
    case STATE_UNINITIALIZED:  WM_LeaveUninitialized(playerN); break;
    case STATE_ENABLED:        break;
    case STATE_CLOSED:         break;
    case STATE_OPENED:         WM_LeaveOpened(playerN);        break;
    case STATE_INVENTORY:      WM_LeaveInventory(playerN);     break;
    case STATE_CLOSED_VISIBLE: break;
  }
}

function void WM_EnterState(int newState, int playerN)
{
  SetUserCVar(playerN, "M8fWeaponMenuIsOpened",  IsOpened() || IsInventory());
  SetUserCVar(playerN, "m8f_wm_WasInventory",    IsInventory());

  switch (newState)
  {
    case STATE_UNINITIALIZED:  break;
    case STATE_ENABLED:        WM_EnterEnabled(playerN);       break;
    case STATE_CLOSED:         WM_EnterClosed(playerN);        break;
    case STATE_OPENED:         WM_EnterOpened(playerN);        break;
    case STATE_INVENTORY:      WM_EnterInventory(playerN);     break;
    case STATE_CLOSED_VISIBLE: WM_EnterClosedVisible(playerN); break;
  }
}

function void WM_LeaveUninitialized(int playerN)
{
  if (currentSet == SET_FALLBACK)
  {
    WM_GetFallbackWeapons(playerN);
  }

  WM_MaybeLoadCustomWeaponOrder(playerN);
}

function void WM_LeaveOpened(int playerN)
{
  WM_ClearScreen();
}

function void WM_LeaveInventory(int playerN)
{
  WM_PlaySwitchSound(playerN);
  WM_ClearScreen();
}

function void WM_EnterEnabled(int playerN)
{
  weaponCount = weaponCounts[currentSet];

  WM_SetSelectedWeapon(WM_FindRealSelectedWeapon(), playerN);
  WM_SetHighlightedWeapon(selectedWeapon, playerN);

  WM_UpdateIsInInventory();
  WM_InitApiCvars(playerN);
  WM_FillInventoryItems(playerN);

  if (IsAlwaysShow(playerN)) { WM_ChangeState(STATE_CLOSED_VISIBLE, playerN); }
  else                       { WM_ChangeState(STATE_CLOSED,         playerN); }
}

function void WM_EnterClosed(int playerN)
{
  if (highlightedWeapon != selectedWeapon)
  {
    WM_SelectWeapon(highlightedWeapon, playerN);
  }

  if (IsAlwaysShow(playerN))
  {
    WM_ChangeState(STATE_CLOSED_VISIBLE, playerN);
  }
}

function void WM_EnterOpened(int playerN)
{
  WM_UpdateIsInInventory();
  WM_UpdateMenu(playerN);
}

function void WM_EnterInventory(int playerN)
{
  WM_SetHighlightedWeapon(WM_FindRealSelectedWeapon(), playerN);
  WM_PlaySwitchSound(playerN);
  WM_PrintInventoryMenu(playerN);
}

function void WM_EnterClosedVisible(int playerN)
{
  WM_UpdateIsInInventory();
  WM_UpdateMenu(playerN);
}

function void WM_MaybeLoadCustomWeaponOrder(int playerN)
{
  int previousSet = GetUserCVar(playerN, "m8f_wm_PreviousWeaponSet");
  if (previousSet != currentSet) { return; }

  int previousCount = GetUserCVar(playerN, "M8fWeaponMenuWeaponCount");
  if (previousCount != weaponCounts[currentSet]) { return; }

  if (currentSet == SET_FALLBACK)
  {
    str  currentPlayerClass  = GetActorClass(0);
    str  previousPlayerClass = GetUserCVarString(playerN, "m8f_wm_PreviousPlayerClass");
    bool sameClass           = (StrCmp(previousPlayerClass, currentPlayerClass) == 0);
    if (!sameClass) { return; }

    bool allWeaponsExist = WM_CheckCVarWeaponsExisting(playerN);
    if (!allWeaponsExist) { return; }
  }

  WM_LoadDataFromCVars(playerN);
}

function void WM_LoadDataFromCVars(int playerN)
{
  for (int i = 0; i < weaponCounts[currentSet]; ++i)
  {
    str weaponClassVarName = StrParam(s:"M8fWeaponMenuWeaponClass", i:i);
    str weaponNameVarName  = StrParam(s:"M8fWeaponMenuWeaponName",  i:i);
    str weaponSlotVarName  = StrParam(s:"M8fWeaponMenuWeaponSlot",  i:i);

    names[currentSet][i] = WM_Unwrap(GetUserCVarString(playerN, weaponClassVarName));
    tags [currentSet][i] = WM_Unwrap(GetUserCVarString(playerN, weaponNameVarName));
    slots[currentSet][i] = GetUserCVar(playerN, weaponSlotVarName);
  }
}

function bool WM_CheckCVarWeaponsExisting(int playerN)
{
  for (int i = 0; i < weaponCounts[currentSet]; ++i)
  {
    str weaponClassCVar = StrParam(s:"M8fWeaponMenuWeaponClass", i:i);
    str weaponClass     = WM_Unwrap(GetUserCVarString(playerN, weaponClassCVar));
    if (!CheckClass(weaponClass)) { return false; }
  }
  return true;
}

// Weapon data access functions ////////////////////////////////////////////////

function int WM_GetWeaponSlot(int weaponNumber)
{
  return slots[currentSet][weaponNumber];
}

function str WM_GetWeaponClass(int weaponNumber)
{
  return names[currentSet][weaponNumber];
}

function str WM_GetPrintableWeaponName(int weaponNumber)
{
  return tags[currentSet][weaponNumber];
}

// Returns weaponNumber of next weapon in this slot, or ERROR_NOT_FOUND if there
// is no more weapons in this slot.
function int WM_GetWeaponSibling(int weaponNumber, bool doCycle, int playerN)
{
  int thisWeaponSlot = WM_GetWeaponSlot(weaponNumber);

  for (int i = 0; i < weaponCount; ++i)
  {
    int w = (weaponNumber + i) % weaponCount;
    if (w != weaponNumber
        && WM_GetWeaponSlot(w) == thisWeaponSlot
        && !WM_SkipNoAmmo(w, playerN))
    {
      if (!doCycle && w < weaponNumber) { return ERROR_NOT_FOUND; }
      return w;
    }
  }

  return ERROR_NOT_FOUND;
}

function int WM_GetWeaponBySlotInInv(int slotNumber, int playerN)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    if (slotNumber != WM_GetWeaponSlot(i)) { continue; }

    str weaponClass = WM_GetWeaponClass(i);
    if (!CheckClass(weaponClass))     { continue; }
    if (!CheckInventory(weaponClass)) { continue; }
    if (WM_SkipNoAmmo(i, playerN))    { continue; }

    return i;
  }

  return ERROR_NOT_FOUND;
}

function bool WM_IsOnlyInSlot(int weaponNumber)
{
  int slot = WM_GetWeaponSlot(weaponNumber);

  for (int prev = weaponNumber - 1; prev >= 0; --prev)
  {
    if (WM_GetWeaponSlot(prev) != slot) { continue; }
    str prevWeaponClass = WM_GetWeaponClass(prev);
    if (!CheckClass(prevWeaponClass))     { continue; }
    if (!CheckInventory(prevWeaponClass)) { continue; }

    return false;
  }

  for (int next = weaponNumber + 1; next < weaponCount; ++next)
  {
    if (WM_GetWeaponSlot(next) != slot) { continue; }
    str nextWeaponClass = WM_GetWeaponClass(next);
    if (!CheckClass(nextWeaponClass))     { continue; }
    if (!CheckInventory(nextWeaponClass)) { continue; }

    return false;
  }

  return true;
}

// Printing Weapons Menu functions /////////////////////////////////////////////

function void WM_UpdateMenu(int playerN)
{
  WM_ClearScreen();
  if (IsVisible()) { WM_PrintMenu(playerN); }
}

function void WM_ClearScreen(void)
{
  int id  = msgIdWeapon;
  int end = msgIdWeapon;
  if (nInventoryItems > weaponCount) { end += nInventoryItems; }
  else                               { end += weaponCount;     }

  do // when menu is disabled, weapon count is 0, so always clear first message.
  {
    HudMessage(s:""; msgFlags, id, 0, 0, 0, 0);
    ++id;
  } while (id < end);

  // clear slots numbers
  end = msgIdWeapon + MAX_WEAPONS_NUMBER + weaponCount;
  for (id = msgIdWeapon + MAX_WEAPONS_NUMBER; id < end; ++id)
  {
    HudMessage(s:""; msgFlags, id, 0, 0, 0, 0);
  }

  HudMessage(s:""; msgFlags, msgIdSelected,    0, 0, 0, 0);
  HudMessage(s:""; msgFlags, msgIdHighlighted, 0, 0, 0, 0);
  HudMessage(s:""; msgFlags, msgIdIcon,        0, 0, 0, 0);
  HudMessage(s:""; msgFlags, msgIdBackground,  0, 0, 0, 0);
  HudMessage(s:""; msgFlags, msgIdBackgroundA, 0, 0, 0, 0);
  HudMessage(s:""; msgFlags, msgIdBackgroundB, 0, 0, 0, 0);
}

function void WM_MaybeShowBackground(int backgroundMode, int playerN)
{
  bool showBackground = GetUserCVar(playerN, "m8f_wm_ShowBackground");

  if (!showBackground) { return; }

  switch (backgroundMode)
  {
  case BACKGROUND_LEFT:
    SetFont("wmbgleft");
    SetHudSize(600, 1, true);
    HudMessage(s:"A"; msgFlags, msgIdBackground,  0, 0.0, -1.0, 0);
    HudMessage(s:"A"; msgFlags, msgIdBackgroundA, 0, 0.0,  0.0, 0);
    HudMessage(s:"A"; msgFlags, msgIdBackgroundB, 0, 0.0,  1.0, 0);
    break;

  case BACKGROUND_TOP:
    SetFont("wmbgtop");
    SetHudSize(1, 600, true);
    HudMessage(s:"A"; msgFlags, msgIdBackground,  0, -1.0, 100.0, 0);
    HudMessage(s:"A"; msgFlags, msgIdBackgroundA, 0,  0.0, 100.0, 0);
    HudMessage(s:"A"; msgFlags, msgIdBackgroundB, 0,  1.0, 100.0, 0);
    break;

  case BACKGROUND_RIGHT:
    SetFont("wmbgrght");
    SetHudSize(600, 1, true);
    HudMessage(s:"A"; msgFlags, msgIdBackground,  0, 600.0, -1.0, 0);
    HudMessage(s:"A"; msgFlags, msgIdBackgroundA, 0, 600.0,  0.0, 0);
    HudMessage(s:"A"; msgFlags, msgIdBackgroundB, 0, 600.0,  1.0, 0);
    break;
  }

  SetHudSize(0, 0, true);
}

function void WM_PrintMenu(int playerN)
{
  int availableWeaponColor   = GetUserCVar(playerN, "M8FAvailableWeaponColor");
  int highlightedWeaponColor = GetUserCVar(playerN, "M8FHighlightedWeaponColor");
  int selectedWeaponColor    = GetUserCVar(playerN, "M8FSelectedWeaponColor");
  int noAmmoColor            = GetUserCVar(playerN, "m8f_wm_NoAmmoColor");

  bool doubleSpaceSlots = GetUserCVar(playerN, "m8f_wm_DoubleSpaceBetweenSlots");
  bool highToLow      = GetUserCVar(playerN, "M8FWeaponMenuHighToLow");
  int  ammoMode       = GetUserCVar(playerN, "M8fWeaponMenuShowAmmoCounts");
  int  displayMode    = GetUserCVar(playerN, "m8f_wm_DisplayMode");
  int  y              = GetUserCVar(playerN, "M8FWeaponMenuYStart");
  int  yStart         = y;
  int  stepMultiplier = GetUserCVar(playerN, "M8FWeaponMenuStepMultiplier");
  int  step           = WM_IfThenElse((weaponCount < 20), 0.05, 0.02);
  int  stepMultiplied = (step * stepMultiplier) >> 16;

  bool showTags;
  bool slotOnLeft;
  bool withSlot;
  int  x;
  int  xStep;
  int  yStep;
  int  itemCount = 0; // used only in 6 and 9
  int  iconX;
  int  backgroundMode;

  if (displayMode == 6 || displayMode == 9) // dry run to count items
  {
    for (int i = 0; i < weaponCount; ++i)
    {
      itemCount += WM_IsInInventory(i);
    }
  }

  switch (displayMode)
  {
  case 0:
    x              = 0.0;
    xStep          = 0.0;
    yStep          = stepMultiplied;
    showTags       = true;
    slotOnLeft     = true;
    withSlot       = false;
    iconX          = 0.08;
    backgroundMode = BACKGROUND_LEFT;
    break;

  case 1:
    x              = 0.0;
    xStep          = 0.0;
    yStep          = stepMultiplied;
    showTags       = false;
    slotOnLeft     = true;
    withSlot       = false;
    iconX          = 0.08;
    backgroundMode = BACKGROUND_LEFT;
    break;

  case 2:
    x              = 0.0;
    xStep          = stepMultiplied;
    yStep          = 0.0;
    showTags       = false;
    slotOnLeft     = true;
    withSlot       = false;
    iconX          = 0.08;
    backgroundMode = BACKGROUND_TOP;
    break;

  case 3:
    x              = 0.5;
    xStep          = 0.0;
    yStep          = stepMultiplied;
    showTags       = true;
    slotOnLeft     = true;
    withSlot       = true;
    iconX          = -0.5;
    backgroundMode = BACKGROUND_TOP;
    break;

  case 4:
    x              = 0.5;
    xStep          = 0.0;
    yStep          = stepMultiplied;
    showTags       = true;
    slotOnLeft     = false;
    withSlot       = true;
    iconX          = -0.5;
    backgroundMode = BACKGROUND_TOP;
    break;

  case 5:
    x              = 0.5;
    xStep          = 0.0;
    yStep          = stepMultiplied;
    showTags       = false;
    slotOnLeft     = true;
    withSlot       = false;
    iconX          = -0.5;
    backgroundMode = BACKGROUND_TOP;
    break;

  case 6:
    x              = 0.5 -
                     ((itemCount - 1 + WM_CountDuplicateSlots(doubleSpaceSlots))
                     * stepMultiplied) / 2;
    xStep          = stepMultiplied;
    yStep          = 0.0;
    showTags       = false;
    slotOnLeft     = true;
    withSlot       = false;
    iconX          = -0.5;
    backgroundMode = BACKGROUND_TOP;
    break;

  case 7:
    x              = 1.0;
    xStep          = 0.0;
    yStep          = stepMultiplied;
    showTags       = true;
    slotOnLeft     = false;
    withSlot       = false;
    iconX          = -0.92;
    backgroundMode = BACKGROUND_RIGHT;
    break;

  case 8:
    x              = 1.0;
    xStep          = 0.0;
    yStep          = stepMultiplied;
    showTags       = false;
    slotOnLeft     = false;
    withSlot       = false;
    iconX          = -0.92;
    backgroundMode = BACKGROUND_RIGHT;
    break;

  case 9:
    x              = 1.0;
    highToLow      = !highToLow;
    xStep          = -stepMultiplied;
    yStep          = 0.0;
    showTags       = false;
    slotOnLeft     = false;
    withSlot       = false;
    iconX          = -0.92;
    backgroundMode = BACKGROUND_TOP;
    break;
  }

  WM_MaybeShowBackground(backgroundMode, playerN);
  WM_SetupFont(playerN);

  if (!showTags) // print weapon info on center
  {
    int infoX = 0.5;
    switch (displayMode)
    {
    case 1: infoX = -0.04; break;
    case 2: infoX =  0.0;  break;
    case 5: infoX = -0.52; break;
    case 8: infoX =  0.96; break;
    case 9: infoX =  1.0;  break;
    }

    str ammo;
    if (selectedWeapon != WEAPON_HOLSTERED
        && selectedWeapon != highlightedWeapon
        && selectedWeapon != ERROR_NOT_FOUND)
    {
      str message = WM_GetPrintableWeaponName(selectedWeapon);
      if (ammoMode != 0)
      {
        str selectedClass = WM_GetWeaponClass(selectedWeapon);
        ammo = WM_GetAmmoString(selectedClass, ammoMode, playerN);
        if (StrLen(ammo) != 0)
        {
          message = StrParam(s:message, s:" - ", s:ammo);
        }
      }
      HudMessage(s:" ", s:message, s:" ";
                 msgFlags, msgIdSelected,
                 selectedWeaponColor, infoX, y + stepMultiplied * 4, 0);
    }

    str highlightedName = WM_GetPrintableWeaponName(highlightedWeapon);
    message = highlightedName;

    if (ammoMode != 0)
    {
      str highlightedClass = WM_GetWeaponClass(highlightedWeapon);
      ammo = WM_GetAmmoString(highlightedClass, ammoMode, playerN);
      if (StrLen(ammo) != 0)
      {
        message = StrParam(s:message, s:" - ", s:ammo);
      }
    }
    HudMessage(s:" ", s:message, s:" ";
               msgFlags, msgIdHighlighted,
               highlightedWeaponColor, infoX, y + stepMultiplied * 2, 0);

  }
  else
  {
    HudMessage(s:""; msgFlags, msgIdSelected,    0, 0, 0, 0);
    HudMessage(s:""; msgFlags, msgIdHighlighted, 0, 0, 0, 0);
  }

  int iBegin;
  int iEnd;
  int iStep;
  if (highToLow) { iBegin = weaponCount - 1; iEnd = -1;          iStep = -1; }
  else           { iBegin = 0;               iEnd = weaponCount; iStep =  1; }

  int prevSlot = -1;

  for (i = iBegin; i != iEnd; i += iStep)
  {
    if (!WM_IsInInventory(i))
    {
      continue;
    }

    if (doubleSpaceSlots)
    {
      int currentSlot = WM_GetWeaponSlot(i);
      bool otherSlot = (prevSlot != -1 && currentSlot != prevSlot);
      if (otherSlot)
      {
        x += xStep;
        y += yStep;
      }
      prevSlot = currentSlot;
    }

    int color;
    if      (i == highlightedWeapon) { color = highlightedWeaponColor; }
    else if (i == selectedWeapon)
    {
      if (!WM_HasAmmo(WM_GetWeaponClass(i), playerN)) { color = noAmmoColor; }
      else { color = selectedWeaponColor; }
    }
    else
    {
      if (!WM_HasAmmo(WM_GetWeaponClass(i), playerN)) { color = noAmmoColor; }
      else { color = availableWeaponColor; }
    }

    WM_PrintHudWeapon(i, color, x, y, slotOnLeft, withSlot, showTags, ammoMode, playerN);

    x += xStep;
    y += yStep;
  }

  int showIcons = GetUserCVar(playerN, "m8f_wm_ShowIcons");
  if (showIcons)
  {
    str weaponClass = WM_GetWeaponClass(highlightedWeapon);
    if (currentSet == SET_REKKR) { weaponClass = StrParam(s:weaponClass, s:"_rekkr"); }
    ScriptCall("WMZScriptHelper", "GetWeaponIcon", weaponClass);
    str icon = GetUserCVarString(playerN, "m8f_wm_ResultString");
    if (StrLen(icon) > 0)
    {
      int iconY = -(yStart - stepMultiplied * 2);
      SetFont(icon);
      HudMessage(s:"A";
                 msgFlags, msgIdIcon,
                 highlightedWeaponColor, iconX, iconY, 0);
      WM_SetupFont(playerN);
    }
  }
}

function int WM_CountDuplicateSlots(bool doubleSpaceSlots)
{
  if (!doubleSpaceSlots) { return 0; }

  int count = 0;
  int prevSlot = -1;

  for (int i = 0; i < weaponCount; ++i)
  {
    if (!WM_IsInInventory(i))
    {
      continue;
    }

    int currentSlot = WM_GetWeaponSlot(i);
    bool otherSlot = (prevSlot != -1 && currentSlot != prevSlot);
    if (otherSlot)
    {
      ++count;
    }
    prevSlot = currentSlot;
  }

  return count;
}

function str WM_MakeWeaponString( int  weaponNumber
                                , bool withSlot
                                , bool slotOnLeft
                                , int  ammoMode
                                , int  playerN
                                )
{
  str result = WM_GetPrintableWeaponName(weaponNumber);

  if (withSlot)
  {
    int slot = WM_GetWeaponSlot(weaponNumber);
    if (slotOnLeft) { result = StrParam(d:slot,   s:" ", s:result); }
    else            { result = StrParam(s:result, s:" ", d:slot  ); }
  }
  else // no slot, just space
  {
    if (slotOnLeft) { result = StrParam(s:"    ", s:result); }
    else            { result = StrParam(s:result, s:"    "); }
  }

  if (ammoMode)
  {
    str ammo = WM_GetAmmoString(WM_GetWeaponClass(weaponNumber), ammoMode, playerN);
    if (StrLen(ammo) != 0)
    {
      if (slotOnLeft) { result = StrParam(s:result, s:" - ", s:ammo  ); }
      else            { result = StrParam(s:ammo,   s:" - ", s:result); }
    }
  }

  return result;
}

function void WM_PrintHudWeapon( int  weaponNumber
                               , int  color
                               , int  x
                               , int  y
                               , bool slotOnLeft
                               , bool withSlot
                               , bool showTags
                               , int  ammoMode
                               , int  playerN
                               )
{
  int id = msgIdWeapon + weaponNumber;

  if (!withSlot)
  {
    int slotNumber = WM_GetWeaponSlot(weaponNumber);
    HudMessage(s:" ", i:slotNumber, s:" ";
               msgFlags, id + MAX_WEAPONS_NUMBER, color, x, y, 0);
  }

  if (!showTags) { return; }

  str weaponString = WM_MakeWeaponString(weaponNumber, withSlot, slotOnLeft, ammoMode, playerN);

  HudMessage(s:" ", s:weaponString, s:" "; msgFlags, id, color, x, y, 0);
}

function void WM_SetupFont(int playerN)
{
  str font = GetUserCVarString(playerN, "m8f_wm_font");
  SetFont(font);
}

// Control functions section ///////////////////////////////////////////////////

function int WM_FindRealSelectedWeapon(void)
{
  return WM_FindInWeaponList(GetWeapon());
}

function int WM_FindInWeaponList(str weaponName)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    if (StrICmp(weaponName, WM_GetWeaponClass(i)) == 0)
    {
      return i;
    }
  }
  return ERROR_NOT_FOUND;
}

function void WM_SelectWeapon(int weaponNumber, int playerN)
{
  if (weaponNumber == selectedWeapon || weaponNumber == -1) { return; }

  str  weaponName = WM_GetWeaponClass(weaponNumber);
  bool success    = SetWeapon(weaponName);

  if (success)
  {
    WM_SetSelectedWeapon(weaponNumber, playerN);
  }
  else
  {
    str printableWeaponName = WM_GetPrintableWeaponName(weaponNumber);
    HudMessage(s:printableWeaponName, s:": no ammo.";
               msgFlags, msgIdAmmo, CR_RED, 0.5, 0.5, 1.0);

    WM_SetHighlightedWeapon(selectedWeapon, playerN);
  }
}

function void WM_InitApiCvars(int playerN)
{
  SetUserCVar(playerN, "M8fWeaponMenuWeaponCount", weaponCount);
  SetUserCVar(playerN, "M8fWeaponMenuIsOpened", false);

  SetUserCVar      (playerN, "m8f_wm_PreviousWeaponSet",   currentSet);
  SetUserCVarString(playerN, "m8f_wm_PreviousPlayerClass", GetActorClass(0));

  for (int i = 0; i < weaponCount; ++i) {
    str weaponClassVarName = StrParam(s:"M8fWeaponMenuWeaponClass", i:i);
    str weaponNameVarName  = StrParam(s:"M8fWeaponMenuWeaponName",  i:i);
    str weaponSlotVarName  = StrParam(s:"M8fWeaponMenuWeaponSlot",  i:i);

    SetUserCVarString(playerN, weaponClassVarName, WM_Wrap(WM_GetWeaponClass(i)));
    SetUserCVarString(playerN, weaponNameVarName,  WM_Wrap(WM_GetPrintableWeaponName(i)));
    SetUserCVar      (playerN, weaponSlotVarName,  WM_GetWeaponSlot(i));
  }
}

function void WM_PlaySwitchSound(int playerN)
{
  str switchSound = GetUserCVarString(playerN, "m8f_wm_SwitchSound");
  PlaySound(0, switchSound, CHAN_AUTO);
}

function int WM_GetWeaponSet(int playerN)
{
  bool forceFallbackMode = GetUserCVar(playerN, "m8f_wm_ForceFallbackMode");
  if (forceFallbackMode) { return SET_FALLBACK; }

  str currentClass = GetActorClass(0);

  // search for class in special lists (class/set: one-to-many and many-to-one).
  int matchedClass = WM_SpecialMatchClassToWeaponSet(currentClass);
  if (matchedClass != ERROR_NOT_FOUND)
  {
    return matchedClass;
  }

  // search for class in regular lists (class/set: one-to-one).
  for (int c = 0; c < SETS_NUMBER; ++c)
  {
    if (CheckActorClass(0, playerClassNames[c]))
    {
      return c;
    }
  }

  return SET_FALLBACK;
}

function bool WM_IsOpenOnScroll(int playerN)
{
  return GetUserCVar(playerN, "M8fWeaponMenuOpenOnScroll");
}

// Scripts section /////////////////////////////////////////////////////////////

// Temporaryly global variables;
int updateCount = 0;
int oldInstant;

#define updatePeriod 10

script "InitWeaponMenu" (int dehackedGameType)
{
  isRekkr = (dehackedGameType == 2);

  int playerN = PlayerNumber();
  currentSet = WM_GetWeaponSet(playerN);

  // for some reason without delay only vanilla weapons will be listed.
  if (currentSet == SET_FALLBACK) { Delay(1); }

  bool wasInventory = GetUserCVar(playerN, "m8f_wm_WasInventory");
  bool wasOpened    = GetUserCVar(playerN, "M8fWeaponMenuIsOpened");

  WM_ChangeState(STATE_ENABLED, playerN);

  if      (wasInventory) { WM_ChangeState(STATE_INVENTORY, playerN); }
  else if (wasOpened)    { WM_ChangeState(STATE_OPENED,    playerN); }

  oldInstant = GetUserCVar(playerN, "M8fWeaponMenuInstantSwitch");
}

script "ShowWeaponMenu" (void)
{
  int playerN = PlayerNumber();
  // CVar may have been reset by other games while this game was saved.
  SetUserCVar(playerN, "M8fWeaponMenuIsOpened", IsOpened() || IsInventory());

  if (updateCount < updatePeriod)
  {
    ++updateCount;
  }
  else
  {
    updateCount = 0;

    bool instant = GetUserCVar(playerN, "M8fWeaponMenuInstantSwitch");
    if (oldInstant != instant)
    {
      WM_InstantSwitch(instant == 2);
      oldInstant = instant;
    }

    if (IsVisible())
    {
      bool updated  = WM_UpdateIsInInventory();
      int  ammoMode = GetUserCVar(playerN, "M8fWeaponMenuShowAmmoCounts");
      if (updated || ammoMode) { WM_UpdateMenu(playerN); }
    }

    if (IsInventory())
    {
      WM_PrintInventoryMenu(playerN);
    }
  }

  /* debug output
     SetFont("SMALLFONT");
     Log(s:"sel:",   i:selectedWeapon,
     s:" high:", i:highlightedWeapon);
  ///*///

  // Check if currently selected weapon corresponds to what player is holding.
  // Handles situation when player drops a weapon, or switches to new weapon
  // on pickup.
  if (selectedWatchEnabled && !WM_IsSelected(selectedWeapon))
  {
    str currentWeaponClass = GetWeapon();
    int currentWeaponI     = WM_FindInWeaponList(currentWeaponClass);

    if (currentWeaponI != ERROR_NOT_FOUND)
    {
      str selectedClass = WM_GetWeaponClass(selectedWeapon);

      WM_SetHighlightedWeapon(currentWeaponI, playerN);
      WM_SetSelectedWeapon(highlightedWeapon, playerN);
      WM_UpdateMenu(playerN);
    }
  }
}

script "OpenWeaponMenu" (void)
{
  if (IsOpened()) { terminate; }
  ACS_NamedExecute("ToggleWeaponMenu", NO_MAP, 0);
}

script "CloseWeaponMenu" (void)
{
  if (!IsOpened()) { terminate; }
  ACS_NamedExecute("ToggleWeaponMenu", NO_MAP, 0);
}

script "ToggleWeaponMenu" (int closeWithoutAction)
{
  if (IsUninitialized()) { terminate; }

  if (IsInventory())
  {
    int playerN = PlayerNumber();

    if (closeWithoutAction)
    {
      WM_ChangeState(STATE_CLOSED, playerN);
    }
    else
    {
      str selectedInventory = WM_GetSelectedInventory(playerN);
      if (StrCmp(selectedInventory, "wm_none") != 0)
      {
        UseInventory(selectedInventory);
        bool closeAfterUse = GetUserCVar(playerN, "m8f_wm_CloseInvMenuAfterUse");
        if (closeAfterUse) { WM_ChangeState(STATE_CLOSED, playerN); }
      }
      else
      {
        WM_ChangeState(STATE_CLOSED, playerN);
      }
    }
    terminate;
  }

  if (IsOpened() && closeWithoutAction)
  {
    WM_SetHighlightedWeapon(WM_FindRealSelectedWeapon(), playerN);
  }

  WM_ToggleWeaponMenu(playerN);
}

function void WM_ToggleWeaponMenu(int playerN)
{
  if (IsOpened())
  {
    WM_ChangeState(STATE_CLOSED, playerN);
  }
  else
  {
    WM_ChangeState(STATE_OPENED, playerN);
  }
}

function int WM_FindSelectedInventoryIndex(int playerN)
{
  // find currently selected
  str selectedInventoryClass = WM_GetSelectedInventory(playerN);
  for (int i = 0; i < nInventoryItems; ++i)
  {
    if (StrCmp(selectedInventoryClass, inventoryClasses[i]) == 0)
    {
      return i;
    }
  }
  return ERROR_NOT_FOUND;
}

function int WM_FindNextAvailableInventory(int selectedInventoryIndex, int playerN)
{
  for (int i = 1; i < nInventoryItems; ++i)
  {
    int availableIndex = (selectedInventoryIndex + i) % nInventoryItems;

    if (!WM_IsCycleEnabled(playerN) && availableIndex == 0) { return ERROR_NOT_FOUND; }

    if (CheckInventory(inventoryClasses[availableIndex]))
    {
      return availableIndex;
    }
  }
  return ERROR_NOT_FOUND;
}

function int WM_FindPrevAvailableInventory(int selectedInventoryIndex, int playerN)
{
  for (int i = 1; i < nInventoryItems; ++i)
  {
    int availableIndex = (selectedInventoryIndex + nInventoryItems - i) % nInventoryItems;

    if (!WM_IsCycleEnabled(playerN) && availableIndex == nInventoryItems - 1) { return ERROR_NOT_FOUND; }

    if (CheckInventory(inventoryClasses[availableIndex]))
    {
      return availableIndex;
    }
  }
  return ERROR_NOT_FOUND;
}

function void WM_SetSelectedInventory(int selectedIndex, int availableIndex, int playerN)
{
  if (selectedIndex == availableIndex || availableIndex == ERROR_NOT_FOUND) { return; }

  WM_PlaySwitchSound(playerN);
  str inventoryClass = inventoryClasses[availableIndex];
  ScriptCall("WMZScriptHelper", "SetSelectedInventory", inventoryClass);
}

function void WM_SelectNextInventory(int playerN)
{
  int selectedInventoryIndex = WM_FindSelectedInventoryIndex(playerN);
  if (selectedInventoryIndex == ERROR_NOT_FOUND) { return; }

  int nextAvailableInventoryIndex = WM_FindNextAvailableInventory(selectedInventoryIndex, playerN);
  WM_SetSelectedInventory(selectedInventoryIndex, nextAvailableInventoryIndex, playerN);
}

function void WM_SelectPreviousInventory(int playerN)
{
  int selectedInventoryIndex = WM_FindSelectedInventoryIndex(playerN);
  if (selectedInventoryIndex == ERROR_NOT_FOUND) { return; }

  int prevAvailableInventoryIndex = WM_FindPrevAvailableInventory(selectedInventoryIndex, playerN);
  WM_SetSelectedInventory(selectedInventoryIndex, prevAvailableInventoryIndex, playerN);
}

script "ScrollNextWeapon" (void)
{
  if (IsUninitialized()) { terminate; }

  int playerN = PlayerNumber();

  if (IsInventory())
  {
    WM_SelectNextInventory(playerN);
    WM_PrintInventoryMenu(playerN);
    terminate;
  }

  if (WM_IsOpenOnScroll(playerN) && !IsOpened())
  {
    WM_ChangeState(STATE_OPENED, playerN);
  }

  int start;
  int n;
  int i;

  if (IsOpened())
  {
    start = highlightedWeapon + 1;
    for (n = 0; n < weaponCount; ++n)
    {
      i = (start + n) % weaponCount;

      if (!WM_IsCycleEnabled(playerN) && i == 0) { terminate; }

      if (WM_IsInInventory(i) && !WM_SkipNoAmmo(i, playerN)) { break; }
    }

    WM_SetHighlightedWeapon(i, playerN);
    if (n != weaponCount - 1) { WM_PlaySwitchSound(playerN); }
  }

  else
  {
    if (selectedWeapon == WEAPON_HOLSTERED) { start = 0;                  }
    else                                    { start = selectedWeapon + 1; }

    for (n = 0; n < weaponCount; ++n)
    {
      i = (start + n) % weaponCount;
      if (SetWeapon(WM_GetWeaponClass(i)) && !WM_SkipNoAmmo(i, playerN)) { break; }
    }

    if (n != weaponCount - 1)
    {
      WM_SetSelectedWeapon(i, playerN);
      WM_SetHighlightedWeapon(i, playerN);
      WM_MaybeDisplayNameTag(playerN);
    }
  }

  WM_UpdateMenu(playerN);
}

function void WM_MaybeDisplayNameTag(int playerN)
{
  bool showNameTag = (GetUserCVar(playerN, "displaynametags") >= 2);
  if (showNameTag)
  {
    int nametagcolor = GetUserCVar(playerN, "nametagcolor");
    str selectedName = WM_GetPrintableWeaponName(selectedWeapon);
    HudMessage(s:selectedName;
               HUDMSG_FADEOUT, msgIdTag, nametagcolor, 0.5, 0.9, 2.0, 1.0);

  }
}

function bool WM_IsCycleEnabled(int playerN)
{
  bool isCycleEnabled = GetUserCVar(playerN, "m8f_wm_cycle_enabled");

  return isCycleEnabled;
}

script "ScrollPreviousWeapon" (void)
{
  if (IsUninitialized()) { terminate; }

  int playerN = PlayerNumber();

  if (IsInventory())
  {
    WM_SelectPreviousInventory(playerN);
    WM_PrintInventoryMenu(playerN);
    terminate;
  }

  if (WM_IsOpenOnScroll(playerN) && !IsOpened())
  {
    WM_ToggleWeaponMenu(playerN);
  }

  int start;
  int n;
  int i;

  if (IsOpened())
  {
    start = highlightedWeapon - 1;
    for (n = 0; n < weaponCount; ++n)
    {
      i = (start - n + weaponCount) % weaponCount;

      if (!WM_IsCycleEnabled(playerN) && i == weaponCount - 1) { terminate; }

      if (WM_IsInInventory(i) && !WM_SkipNoAmmo(i, playerN)) { break; }
    }

    WM_SetHighlightedWeapon(i, playerN);
    if (n != weaponCount - 1) { WM_PlaySwitchSound(playerN); }
  }

  else
  {
    if (selectedWeapon == WEAPON_HOLSTERED) { start = weaponCount    - 1; }
    else                                    { start = selectedWeapon - 1; }

    for (n = 0; n < weaponCount; ++n)
    {
      i = (start - n + weaponCount) % weaponCount;
      if (SetWeapon(WM_GetWeaponClass(i)) && !WM_SkipNoAmmo(i, playerN)) { break; }
    }

    if (n != weaponCount - 1)
    {
      WM_SetSelectedWeapon(i, playerN);
      WM_SetHighlightedWeapon(i, playerN);
      WM_MaybeDisplayNameTag(playerN);
    }
  }

  WM_UpdateMenu(playerN);
}

function bool WM_SkipNoAmmo(int weaponIndex, int playerN)
{
  bool shouldSkipNoAmmo = GetUserCvar(playerN, "m8f_wm_SkipNoAmmo");
  if (!shouldSkipNoAmmo) { return false; }

  bool hasAmmo = WM_HasAmmo(WM_GetWeaponClass(weaponIndex), playerN);
  return !hasAmmo;
}

function int WM_GetNextWeaponInSlot(int weaponIndex, bool cycle, int playerN)
{
  int i       = weaponIndex;
  int stopper = weaponCount;

  do
    {
      i = WM_GetWeaponSibling(i, cycle, playerN);
      if (i == -1) { break; }
      --stopper;
    }
  while (!WM_IsInInventory(i) && stopper);

  return i;
}

script "SmartWeaponSelection" (int slotNumber)
{
  if (IsUninitialized()) { terminate; }

  int playerN = PlayerNumber();

  if (IsInventory())
  {
    WM_ChangeState(STATE_CLOSED, playerN);
  }

  if (IsOpened())
  {
    int  currentSlot = WM_GetWeaponSlot(highlightedWeapon);
    bool sameSlot    = (slotNumber == currentSlot);
    if (sameSlot)
    {
      int sibling = WM_GetNextWeaponInSlot(highlightedWeapon, true, playerN);

      if (sibling != -1 && sibling != highlightedWeapon)
      {
        WM_SetHighlightedWeapon(sibling, playerN);
        WM_PlaySwitchSound(playerN);
      }
    }
    else
    {
      WM_HighlightFirstInInventory(slotNumber, playerN);
    }
  }

  else
  {
    bool immediatelySelect = GetUserCVar(playerN, "M8fWeaponMenuImmediatelySelectIfOnlyInSlot");
    if (immediatelySelect)
    {
      int weaponNumber = WM_GetWeaponBySlotInInv(slotNumber, playerN);
      if (weaponNumber == -1) { terminate; }

      if (WM_IsOnlyInSlot(weaponNumber))
      {
        if (CheckInventory(WM_GetWeaponClass(weaponNumber)))
        {
          WM_SelectWeapon(weaponNumber, playerN);
          terminate;
        }
      }
    }

    WM_ToggleWeaponMenu(playerN);
    WM_HighlightFirstInInventory(slotNumber, playerN);
  }

  WM_UpdateMenu(playerN);
}

// Utility functions section ///////////////////////////////////////////////////

function bool WM_UpdateIsInInventory(void)
{
  bool updated = false;

  for (int i = 0; i < weaponCount; ++i)
  {
    bool old         = isInInventory[i];
    str  weaponClass = WM_GetWeaponClass(i);

    if (CheckClass(weaponClass)) { isInInventory[i] = CheckInventory(weaponClass); }
    else                         { isInInventory[i] = false;                       }

    if (old != isInInventory[i]) { updated = true; }
  }

  return updated;
}

function void WM_ResetIsInInventory(void)
{
  for (int i = 0; i < weaponCount; ++i)
  {
    isInInventory[i] = CheckInventory(WM_GetWeaponClass(i));
  }
}

function bool WM_IsInInventory(int weaponNumber)
{
  return isInInventory[weaponNumber];
}

function bool WM_IsSelected(int weaponNumber)
{
  if (weaponNumber == WEAPON_HOLSTERED) { return true; }
  return CheckWeapon(WM_GetWeaponClass(weaponNumber));
}

function void WM_HighlightFirstInInventory(int slotNumber, int playerN)
{
  int weaponNumber = WM_GetWeaponBySlotInInv(slotNumber, playerN);
  if (WM_IsInInventory(weaponNumber) && highlightedWeapon != weaponNumber)
  {
    WM_SetHighlightedWeapon(weaponNumber, playerN);
    WM_PlaySwitchSound(playerN);
  }
}

// Global variables write access functions /////////////////////////////////////

function void WM_SetHighlightedWeapon(int weaponNumber, int playerN)
{
  if (weaponNumber == WEAPON_HOLSTERED) { return; }
  highlightedWeapon = weaponNumber;
}

function void WM_SetSelectedWeapon(int weaponNumber, int playerN)
{
  selectedWeapon = weaponNumber;

  SetUserCVarString(playerN, "m8f_wm_SelectedWeaponTag",
                    WM_GetPrintableWeaponName(selectedWeapon));
}

function void WM_SetSelectedWatchEnabled(bool isEnabled)
{
  selectedWatchEnabled = isEnabled;
}

// Global variables read access functions //////////////////////////////////////

function int WM_GetSelectedWeapon(void)
{
  return selectedWeapon;
}

// Weapon Priority Section /////////////////////////////////////////////////////

script "WM_ApplyTagChange" (void)
{
  int playerN           = PlayerNumber();
  str newName           = GetUserCVarString(playerN, "m8f_wm_SelectedWeaponTag");
  str weaponNameVarName = StrParam(s:"M8fWeaponMenuWeaponName", i:selectedWeapon);

  SetUserCVarString(playerN, weaponNameVarName, WM_Wrap(newName));
  tags[currentSet][selectedWeapon] = newName;
}

script "WM_IncreasePriority" (void)
{
  if (IsUninitialized()) { terminate; }

  str name = WM_GetPrintableWeaponName(highlightedWeapon);
  if (highlightedWeapon == 0)
  {
    Log(s:"Priority of ", s:name, s:" is already maximal.");
    terminate;
  }

  int oldMajorWeapon = highlightedWeapon - 1;
  int thisWeaponSlot = WM_GetWeaponSlot(highlightedWeapon);
  int oldWeaponSlot  = WM_GetWeaponSlot(oldMajorWeapon);
  if (thisWeaponSlot != oldWeaponSlot)
  {
    Log(s:"Priority of ", s:name, s:" is already maximal.");
    terminate;
  }

  int playerN = PlayerNumber();

  WM_SwapWeapons(highlightedWeapon, oldMajorWeapon, true, playerN);
  WM_SetHighlightedWeapon(oldMajorWeapon, playerN);
  Log(s:"Priority of ", s:name, s:" is increased.");
  WM_UpdateMenu(playerN);
}

function void WM_SwapWeapons(int w1, int w2, bool setCVars, int playerN)
{
  if (w1 == w2) { return; }

  int namesTmp = names[currentSet][w1];
  names[currentSet][w1] = names[currentSet][w2];
  names[currentSet][w2] = namesTmp;

  int tagTmp = tags[currentSet][w1];
  tags[currentSet][w1] = tags[currentSet][w2];
  tags[currentSet][w2] = tagTmp;

  int slotTmp = slots[currentSet][w1];
  slots[currentSet][w1] = slots[currentSet][w2];
  slots[currentSet][w2] = slotTmp;

  int priorityTmp = priority[w1];
  priority[w1] = priority[w2];
  priority[w2] = priorityTmp;

  if (setCVars)
  {
    str weaponClassVarName1 = StrParam(s:"M8fWeaponMenuWeaponClass", i:w1);
    str weaponClassVarName2 = StrParam(s:"M8fWeaponMenuWeaponClass", i:w2);
    SetUserCVarString(playerN, weaponClassVarName1, WM_Wrap(WM_GetWeaponClass(w1)));
    SetUserCVarString(playerN, weaponClassVarName2, WM_Wrap(WM_GetWeaponClass(w2)));

    str weaponNameVarName1 = StrParam(s:"M8fWeaponMenuWeaponName", i:w1);
    str weaponNameVarName2 = StrParam(s:"M8fWeaponMenuWeaponName", i:w2);
    SetUserCVarString(playerN, weaponNameVarName1, WM_Wrap(WM_GetPrintableWeaponName(w1)));
    SetUserCVarString(playerN, weaponNameVarName2, WM_Wrap(WM_GetPrintableWeaponName(w2)));

    str slotVarName1 = StrParam(s:"M8fWeaponMenuWeaponSlot", i:w1);
    str slotVarName2 = StrParam(s:"M8fWeaponMenuWeaponSlot", i:w2);
    SetUserCVar(playerN, slotVarName1, WM_GetWeaponSlot(w1));
    SetUserCVar(playerN, slotVarName2, WM_GetWeaponSlot(w2));
  }
}

script "WM_IncreaseSlot" (void)
{
  if (IsUninitialized()) { terminate; }

  int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
  if (currentSlot == 11) { terminate; }

  int nextSlot[11] = { 10, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11 };
  int targetSlot   = nextSlot[currentSlot];
  int playerN      = PlayerNumber();
  int i            = highlightedWeapon;

  if (i != weaponCount - 1)
  {
    while ((WM_GetWeaponSlot(i + 1) == currentSlot) && (i != weaponCount - 1))
    {
      WM_SwapWeapons(i, i + 1, true, playerN);
      if (i + 1 == selectedWeapon) { WM_SetSelectedWeapon(i, playerN); }
      ++i;
    }
  }
  WM_ResetIsInInventory();

  slots[currentSet][i] = targetSlot;
  str weaponSlotVarName = StrParam(s:"M8fWeaponMenuWeaponSlot",  i:i);
  SetUserCVar(playerN, weaponSlotVarName, targetSlot);

  WM_SetHighlightedWeapon(i, playerN);
  str name = WM_GetPrintableWeaponName(i);
  Log(s:"Slot of ", s:name, s:" is changed to ", i:targetSlot, s:".");
  WM_UpdateMenu(playerN);
}

script "WM_DecreaseSlot" (void)
{
  if (IsUninitialized()) { terminate; }

  int currentSlot = WM_GetWeaponSlot(highlightedWeapon);
  if (currentSlot == 1) { terminate; }

  int prevSlot[12] = { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10 };
  int targetSlot   = prevSlot[currentSlot];
  int playerN      = PlayerNumber();
  int i            = highlightedWeapon;

  if (i != 0)
  {
    while (WM_GetWeaponSlot(i - 1) == currentSlot && i != 0)
    {
      WM_SwapWeapons(i, i - 1, true, playerN);
      if (i - 1 == selectedWeapon) { WM_SetSelectedWeapon(i, playerN); }
      --i;
    }
  }
  WM_ResetIsInInventory();

  slots[currentSet][i] = targetSlot;
  str weaponSlotVarName = StrParam(s:"M8fWeaponMenuWeaponSlot",  i:i);
  SetUserCVar(playerN, weaponSlotVarName, targetSlot);

  str name = WM_GetPrintableWeaponName(highlightedWeapon);
  WM_SetHighlightedWeapon(i, playerN);
  Log(s:"Slot of ", s:name, s:" is changed to ", i:targetSlot, s:".");
  WM_UpdateMenu(playerN);
}

// Inventory menu section //////////////////////////////////////////////////////

script "WM_OpenInventoryMenu" (void)
{
  if (IsInventory()) { terminate; }
  ACS_NamedExecute("WM_InventoryMenu", NO_MAP);
}

script "WM_CloseInventoryMenu" (void)
{
  if (!IsInventory()) { terminate; }
  ACS_NamedExecute("WM_InventoryMenu", NO_MAP);
}

script "WM_InventoryMenu" (void)
{
  if (IsUninitialized()) { terminate; }

  int playerN = PlayerNumber();

  if (IsInventory())
  {
    WM_ChangeState(STATE_CLOSED, playerN);
  }
  else
  {
    if (nInventoryItems != 0)
    {
      WM_ChangeState(STATE_INVENTORY, playerN);
    }
    else
    {
      Log(s:"Inventory is empty.");
    }
  }
}

function void WM_FillInventoryItems(int playerN)
{
  str inventoryContents       = WM_GetStringFromZScript(playerN, "GetInventoryList");
  int inventoryContentsLength = StrLen(inventoryContents);

  int current      = 0;
  str currentToken = "";
  int iArray       = 0;

  for (int i = 0; i < inventoryContentsLength && current < N_INVENTORY_ITEMS; ++i)
  {
    int character = GetChar(inventoryContents, i);
    if (character != '>')
    {
      currentToken = StrParam(s:currentToken, c:character);
    }
    else
    {
      switch (iArray)
      {
      case 0:
        inventoryClasses[current] = currentToken;
        break;
      case 1: inventoryNames[current] = currentToken; ++current; break;
      }

      iArray = (iArray + 1) % 2;
      currentToken = "";
    }
  }

  /*
  for (int j = 0; j < current; ++j)
  {
    Log(s:inventoryClasses[j], s:" : ", s:inventoryNames[j]);
  }
  ///*///

  nInventoryItems = current;
}

function void WM_PrintInventoryMenu(int playerN)
{
  WM_ClearScreen();

  int xStart           = GetUserCVar(playerN, "m8f_wm_InventoryMenuX");
  int backgroundMode   = xStart / 0.5;

  WM_MaybeShowBackground(backgroundMode, playerN);
  WM_SetupFont(playerN);

  int availableColor   = GetUserCVar(playerN, "M8FAvailableWeaponColor");
  int highlightedColor = GetUserCVar(playerN, "M8FHighlightedWeaponColor");
  bool highToLow       = GetUserCVar(playerN, "M8FWeaponMenuHighToLow");

  int yStart           = GetUserCVar(playerN, "m8f_wm_InventoryMenuY");
  int stepMultiplier   = GetUserCVar(playerN, "m8f_wm_StepMultiplier");
  if (stepMultiplier < 0.0) { highToLow = !highToLow; }

  int stepMultiplied = (0.05 * stepMultiplier) >> 16;

  int iBegin;
  int iEnd;
  int iStep;
  if (highToLow) {iBegin = nInventoryItems-1; iEnd = -1;              iStep = -1;}
  else           {iBegin = 0;                 iEnd = nInventoryItems; iStep =  1;}

  str selectedInventoryClass = WM_GetSelectedInventory(playerN);
  int position = 0;
  for (int i = iBegin; i != iEnd; i += iStep)
  {
    int inventoryClass = inventoryClasses[i];
    int amount = CheckInventory(inventoryClass);
    if (amount == 0) { continue; }

    int color;
    if (StrCmp(inventoryClass, selectedInventoryClass) == 0)
    {
      color = highlightedColor;
    }
    else
    {
      color = availableColor;
    }

    WM_PrintInventoryItem(i, position, color, xStart, yStart, stepMultiplied, amount, playerN);
    ++position;
  }

  if (position == 0)
  {
    HudMessage(s:" (Inventory is empty) ";
               msgFlags, msgIdWeapon, availableColor, xStart, yStart, 0);
  }

}

function void WM_PrintInventoryItem( int i
                                   , int position
                                   , int color
                                   , int xStart
                                   , int yStart
                                   , int stepMultiplied
                                   , int amount
                                   , int playerN
                                   )
{
  int id = msgIdWeapon + position;
  int y  = yStart + position * stepMultiplied;
  int x  = xStart;

  str itemString = inventoryNames[i];
  str itemClass  = inventoryClasses[i];

  for (int n = 0; n < N_QUICK_INVENTORY_ITEMS; ++n)
  {
    if (StrCmp(itemClass, WM_GetQuickInventoryItem(n, playerN)) == 0)
    {
      itemString = StrParam(s:itemString, s:" (Q", d:n + 1, s:")");
      break;
    }
  }
  if (amount > 1) { itemString = StrParam(s:itemString, s:" (", d:amount, s:")"); }

  HudMessage(s:" ", s:itemString, s:" "; msgFlags, id, color, x, y, 0);
}

// Fallback Mode Section ///////////////////////////////////////////////////////

function void WM_GetFallbackWeapons(int playerN)
{
  // received data format: Class>Tag>Slot>Priority>Class ...
  str weaponData       = WM_GetStringFromZScript(playerN, "GetWeaponList");
  int weaponDataLength = StrLen(weaponData);
  int current          = 0;
  int iArray           = 0;
  int tokenLength      = 0;

  for (int i = 0; i < weaponDataLength && current < MAX_WEAPONS_NUMBER; i += tokenLength + 1)
  {
    tokenLength = 0;
    while(GetChar(weaponData, i + tokenLength) != '>') { ++tokenLength; }

    str currentToken = StrMid(weaponData, i, tokenLength);

    switch (iArray)
    {
      case 0: names[SET_FALLBACK][current] = currentToken; break;

      case 1: tags [SET_FALLBACK][current] = currentToken; break;

      case 2:
        slots[SET_FALLBACK][current] = WM_StrToInt(currentToken);
        break;

      case 3:
        priority[current] = WM_StrToInt(currentToken);
        ++current;
        break;
    }

    iArray = (iArray + 1) % 4;
  }

  weaponCounts[SET_FALLBACK] = current;
  weaponCount = current;

  /*
  for (int j = 0; j < current; ++j)
  {
    Log(s:names[SET_FALLBACK][j],
        s:" : ", s:tags [SET_FALLBACK][j],
        s:" : ", d:slots[SET_FALLBACK][j],
        s:" : ", d:priority[j]
        );
  }
  Log(i:weaponCounts[SET_FALLBACK]);
  ///*///
}
